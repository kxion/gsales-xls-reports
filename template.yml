AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Gales Sales XLS Reports Service

Parameters:
  IAMUsername:
    Description: Username of the IAM user for this service
    Type: String
    Default: sysadmin
  # ParamThundraKey:
  #   Description: thundra.io API key
  #   Type: String
  ParamBucketName:
    Description: Bucket that stores pdfs
    Type: String
  # ParamAuthLambda:
  #   Type: String
  ParamProjectName:
    Description: Project name
    Type: String

Resources:
  RestApi:
    Type: AWS::Serverless::Api
    DeletionPolicy: Delete
    DependsOn: Lambda
    Properties:
      StageName: Prod
      # Auth:
      #   DefaultAuthorizer: LambdaTokenAuthorizer
      #   Authorizers:
      #     LambdaTokenAuthorizer:
      #       FunctionArn: !Sub "${ParamAuthLambda}"
      #       Identity:
      #         ReauthorizeEvery: 300

  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: go1.x
      CodeUri: ./dist
      Handler: /report
      Role: !GetAtt LambdaRole.Arn
      # Environment:
        # Variables:
        #   API_URL: !Join
        #     - ''
        #     - - https://
        #       - !Ref ServerlessRestApi
        #       - .execute-api.
        #       - !Ref 'AWS::Region'
        #       - .amazonaws.com
        #       - /Prod/
      Timeout: 10
      Environment:
        Variables:
          Stage: prod
      Events:
        # Create:
        #   Type: Api
        #   Properties:
        #     Path: /report
        #     Method: post
        #     RestApiId: !Ref RestApi
        Ping:
          Type: Api
          Properties:
            Path: /report
            Method: get
            RestApiId: !Ref RestApi
      Tags:
        BillTo: 'Gales'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: FunctionParameterAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ssm:GetParametersByPath
            Resource:
              Fn::Sub: arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/prod/${ParamProjectName}*
      - PolicyName: FunctionLogAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
      - PolicyName: FunctionXRayAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - xray:PutTraceSegments
            - xray:PutTelemetryRecords
            Resource: '*'
      # - PolicyName: FunctionS3Access
      #   PolicyDocument:
      #     Version: '2012-10-17'
      #     Statement:
      #     - Effect: Allow
      #       Action:
      #       - s3:*
      #       Resource: arn:aws:s3:::${ParamBucketName}/reports/*

Outputs:
  ApiId:
    Description: API ID
    Value:
      Ref: RestApi
  ApiEndpoint:
    Description: "API Prod stage endpoint"
    Value: !Sub "https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  ApiArn:
    Description: "API ARN"
    Value: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/"
  LambdaArn:
    Description: "Lambda ARN"
    Value: !GetAtt Lambda.Arn
  LambdaRoleArn:
    Description: "Lambda Role ARN"
    Value: !GetAtt LambdaRole.Arn